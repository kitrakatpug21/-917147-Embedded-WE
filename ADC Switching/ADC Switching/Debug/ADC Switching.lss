
ADC Switching.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c1  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  00000865  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f9  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000109c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ee  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  000013ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 df 00 	jmp	0x1be	; 0x1be <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRA = 0b00000000;
  6c:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0b01000011;
  6e:	83 e4       	ldi	r24, 0x43	; 67
  70:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	86 b9       	out	0x06, r24	; 6
	DDRC = 0b11111111;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	84 bb       	out	0x14, r24	; 20
	while (1) 
    {
		ADCSRA = ADCSRA | 0b01000000; // Set the Start bit to 1
  7a:	86 b1       	in	r24, 0x06	; 6
  7c:	80 64       	ori	r24, 0x40	; 64
  7e:	86 b9       	out	0x06, r24	; 6
		// now we will wait for the flag to be Set to 1
		while ((ADCSRA & 0b00010000) == 0)
  80:	34 9b       	sbis	0x06, 4	; 6
  82:	fe cf       	rjmp	.-4      	; 0x80 <main+0x14>
		{
			// wait here till conversion is complete
		}
		if (ADC >=0 && ADC <= 10)
  84:	84 b1       	in	r24, 0x04	; 4
  86:	95 b1       	in	r25, 0x05	; 5
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	95 b1       	in	r25, 0x05	; 5
  8c:	0b 97       	sbiw	r24, 0x0b	; 11
  8e:	10 f4       	brcc	.+4      	; 0x94 <main+0x28>
		{
			PORTC = 0b00000000;
  90:	15 ba       	out	0x15, r1	; 21
  92:	f3 cf       	rjmp	.-26     	; 0x7a <main+0xe>
		}
		else if (ADC >=11 && ADC <= 59)
  94:	84 b1       	in	r24, 0x04	; 4
  96:	95 b1       	in	r25, 0x05	; 5
  98:	0b 97       	sbiw	r24, 0x0b	; 11
  9a:	38 f0       	brcs	.+14     	; 0xaa <main+0x3e>
  9c:	84 b1       	in	r24, 0x04	; 4
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	cc 97       	sbiw	r24, 0x3c	; 60
  a2:	18 f4       	brcc	.+6      	; 0xaa <main+0x3e>
		{
			PORTC = 0b00001100;
  a4:	8c e0       	ldi	r24, 0x0C	; 12
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	e8 cf       	rjmp	.-48     	; 0x7a <main+0xe>
		}
		else if (ADC >=60 && ADC <= 99)
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	95 b1       	in	r25, 0x05	; 5
  ae:	cc 97       	sbiw	r24, 0x3c	; 60
  b0:	40 f0       	brcs	.+16     	; 0xc2 <main+0x56>
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	84 36       	cpi	r24, 0x64	; 100
  b8:	91 05       	cpc	r25, r1
  ba:	18 f4       	brcc	.+6      	; 0xc2 <main+0x56>
		{
			PORTC = 0b00001110;
  bc:	8e e0       	ldi	r24, 0x0E	; 14
  be:	85 bb       	out	0x15, r24	; 21
  c0:	dc cf       	rjmp	.-72     	; 0x7a <main+0xe>
		}
		else if (ADC >=100 && ADC <= 199)
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	95 b1       	in	r25, 0x05	; 5
  c6:	84 36       	cpi	r24, 0x64	; 100
  c8:	91 05       	cpc	r25, r1
  ca:	40 f0       	brcs	.+16     	; 0xdc <main+0x70>
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	95 b1       	in	r25, 0x05	; 5
  d0:	88 3c       	cpi	r24, 0xC8	; 200
  d2:	91 05       	cpc	r25, r1
  d4:	18 f4       	brcc	.+6      	; 0xdc <main+0x70>
		{
			PORTC = 0b00000001;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	85 bb       	out	0x15, r24	; 21
  da:	cf cf       	rjmp	.-98     	; 0x7a <main+0xe>
		}
		else if (ADC >=200 && ADC <= 299)
  dc:	84 b1       	in	r24, 0x04	; 4
  de:	95 b1       	in	r25, 0x05	; 5
  e0:	88 3c       	cpi	r24, 0xC8	; 200
  e2:	91 05       	cpc	r25, r1
  e4:	40 f0       	brcs	.+16     	; 0xf6 <main+0x8a>
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	8c 32       	cpi	r24, 0x2C	; 44
  ec:	91 40       	sbci	r25, 0x01	; 1
  ee:	18 f4       	brcc	.+6      	; 0xf6 <main+0x8a>
		{
			PORTC = 0b00000010;
  f0:	82 e0       	ldi	r24, 0x02	; 2
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	c2 cf       	rjmp	.-124    	; 0x7a <main+0xe>
		}
		else if (ADC >=300 && ADC <= 399)
  f6:	84 b1       	in	r24, 0x04	; 4
  f8:	95 b1       	in	r25, 0x05	; 5
  fa:	8c 32       	cpi	r24, 0x2C	; 44
  fc:	91 40       	sbci	r25, 0x01	; 1
  fe:	40 f0       	brcs	.+16     	; 0x110 <main+0xa4>
 100:	84 b1       	in	r24, 0x04	; 4
 102:	95 b1       	in	r25, 0x05	; 5
 104:	80 39       	cpi	r24, 0x90	; 144
 106:	91 40       	sbci	r25, 0x01	; 1
 108:	18 f4       	brcc	.+6      	; 0x110 <main+0xa4>
		{
			PORTC = 0b00000011;
 10a:	83 e0       	ldi	r24, 0x03	; 3
 10c:	85 bb       	out	0x15, r24	; 21
 10e:	b5 cf       	rjmp	.-150    	; 0x7a <main+0xe>
		}
		else if (ADC >=400 && ADC <= 499)
 110:	84 b1       	in	r24, 0x04	; 4
 112:	95 b1       	in	r25, 0x05	; 5
 114:	80 39       	cpi	r24, 0x90	; 144
 116:	91 40       	sbci	r25, 0x01	; 1
 118:	40 f0       	brcs	.+16     	; 0x12a <main+0xbe>
 11a:	84 b1       	in	r24, 0x04	; 4
 11c:	95 b1       	in	r25, 0x05	; 5
 11e:	84 3f       	cpi	r24, 0xF4	; 244
 120:	91 40       	sbci	r25, 0x01	; 1
 122:	18 f4       	brcc	.+6      	; 0x12a <main+0xbe>
		{
			PORTC = 0b00000100;
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	85 bb       	out	0x15, r24	; 21
 128:	a8 cf       	rjmp	.-176    	; 0x7a <main+0xe>
		}
		else if (ADC >=500 && ADC <= 599)
 12a:	84 b1       	in	r24, 0x04	; 4
 12c:	95 b1       	in	r25, 0x05	; 5
 12e:	84 3f       	cpi	r24, 0xF4	; 244
 130:	91 40       	sbci	r25, 0x01	; 1
 132:	40 f0       	brcs	.+16     	; 0x144 <main+0xd8>
 134:	84 b1       	in	r24, 0x04	; 4
 136:	95 b1       	in	r25, 0x05	; 5
 138:	88 35       	cpi	r24, 0x58	; 88
 13a:	92 40       	sbci	r25, 0x02	; 2
 13c:	18 f4       	brcc	.+6      	; 0x144 <main+0xd8>
		{
			PORTC = 0b00000101;
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	85 bb       	out	0x15, r24	; 21
 142:	9b cf       	rjmp	.-202    	; 0x7a <main+0xe>
		}
		else if (ADC >=600 && ADC <= 699)
 144:	84 b1       	in	r24, 0x04	; 4
 146:	95 b1       	in	r25, 0x05	; 5
 148:	88 35       	cpi	r24, 0x58	; 88
 14a:	92 40       	sbci	r25, 0x02	; 2
 14c:	40 f0       	brcs	.+16     	; 0x15e <main+0xf2>
 14e:	84 b1       	in	r24, 0x04	; 4
 150:	95 b1       	in	r25, 0x05	; 5
 152:	8c 3b       	cpi	r24, 0xBC	; 188
 154:	92 40       	sbci	r25, 0x02	; 2
 156:	18 f4       	brcc	.+6      	; 0x15e <main+0xf2>
		{
			PORTC = 0b00000110;
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	85 bb       	out	0x15, r24	; 21
 15c:	8e cf       	rjmp	.-228    	; 0x7a <main+0xe>
		}
		else if (ADC >=700 && ADC <= 799)
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	95 b1       	in	r25, 0x05	; 5
 162:	8c 3b       	cpi	r24, 0xBC	; 188
 164:	92 40       	sbci	r25, 0x02	; 2
 166:	40 f0       	brcs	.+16     	; 0x178 <main+0x10c>
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	95 b1       	in	r25, 0x05	; 5
 16c:	80 32       	cpi	r24, 0x20	; 32
 16e:	93 40       	sbci	r25, 0x03	; 3
 170:	18 f4       	brcc	.+6      	; 0x178 <main+0x10c>
		{
			PORTC = 0b00000111;
 172:	87 e0       	ldi	r24, 0x07	; 7
 174:	85 bb       	out	0x15, r24	; 21
 176:	81 cf       	rjmp	.-254    	; 0x7a <main+0xe>
		}
		else if (ADC >=800 && ADC <= 899)
 178:	84 b1       	in	r24, 0x04	; 4
 17a:	95 b1       	in	r25, 0x05	; 5
 17c:	80 32       	cpi	r24, 0x20	; 32
 17e:	93 40       	sbci	r25, 0x03	; 3
 180:	40 f0       	brcs	.+16     	; 0x192 <main+0x126>
 182:	84 b1       	in	r24, 0x04	; 4
 184:	95 b1       	in	r25, 0x05	; 5
 186:	84 38       	cpi	r24, 0x84	; 132
 188:	93 40       	sbci	r25, 0x03	; 3
 18a:	18 f4       	brcc	.+6      	; 0x192 <main+0x126>
		{
			PORTC = 0b00001000;
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	85 bb       	out	0x15, r24	; 21
 190:	74 cf       	rjmp	.-280    	; 0x7a <main+0xe>
		}
		else if (ADC >=900 && ADC <= 999)
 192:	84 b1       	in	r24, 0x04	; 4
 194:	95 b1       	in	r25, 0x05	; 5
 196:	84 38       	cpi	r24, 0x84	; 132
 198:	93 40       	sbci	r25, 0x03	; 3
 19a:	40 f0       	brcs	.+16     	; 0x1ac <main+0x140>
 19c:	84 b1       	in	r24, 0x04	; 4
 19e:	95 b1       	in	r25, 0x05	; 5
 1a0:	88 3e       	cpi	r24, 0xE8	; 232
 1a2:	93 40       	sbci	r25, 0x03	; 3
 1a4:	18 f4       	brcc	.+6      	; 0x1ac <main+0x140>
		{
			PORTC = 0b00001001;
 1a6:	89 e0       	ldi	r24, 0x09	; 9
 1a8:	85 bb       	out	0x15, r24	; 21
 1aa:	67 cf       	rjmp	.-306    	; 0x7a <main+0xe>
		}
		else if (ADC >=1000)
 1ac:	84 b1       	in	r24, 0x04	; 4
 1ae:	95 b1       	in	r25, 0x05	; 5
 1b0:	88 3e       	cpi	r24, 0xE8	; 232
 1b2:	93 40       	sbci	r25, 0x03	; 3
 1b4:	08 f4       	brcc	.+2      	; 0x1b8 <main+0x14c>
 1b6:	61 cf       	rjmp	.-318    	; 0x7a <main+0xe>
		{
			PORTC = 0b00001111;
 1b8:	8f e0       	ldi	r24, 0x0F	; 15
 1ba:	85 bb       	out	0x15, r24	; 21
 1bc:	5e cf       	rjmp	.-324    	; 0x7a <main+0xe>

000001be <_exit>:
 1be:	f8 94       	cli

000001c0 <__stop_program>:
 1c0:	ff cf       	rjmp	.-2      	; 0x1c0 <__stop_program>
