
7Segment using Array.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b4  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ed  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002dc  00000000  00000000  00000ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  000011c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  00001522  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001622  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e1       	ldi	r30, 0x12	; 18
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	0b01101111, //Display 9 at Index 9
};

int main(void)
{
	DDRC = 0b01111111;// PC6 to PC0 as OUTPUT
  82:	8f e7       	ldi	r24, 0x7F	; 127
  84:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b01111111;// PD6 to PD0 as OUTPUT
  86:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b01111111;// PB6 to PB0 as OUTPUT
  88:	87 bb       	out	0x17, r24	; 23
	int x = 0;
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b0 e0       	ldi	r27, 0x00	; 0
	while (1)
	{
		for (int hundreds = 0; hundreds <= 9; hundreds = hundreds + 1)
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	39 c0       	rjmp	.+114    	; 0x106 <main+0x84>
		{
			for (int tens = 0; tens <= 9; tens = tens + 1)
			{
				for (int ones = 0; ones <= 9; ones = ones + 1)
				{
					if (ones == 0 && tens == 0 && hundreds == 0 && x == 0)
  94:	00 97       	sbiw	r24, 0x00	; 0
  96:	71 f4       	brne	.+28     	; 0xb4 <main+0x32>
  98:	41 15       	cp	r20, r1
  9a:	51 05       	cpc	r21, r1
  9c:	59 f4       	brne	.+22     	; 0xb4 <main+0x32>
  9e:	61 15       	cp	r22, r1
  a0:	71 05       	cpc	r23, r1
  a2:	41 f4       	brne	.+16     	; 0xb4 <main+0x32>
  a4:	10 97       	sbiw	r26, 0x00	; 0
  a6:	31 f4       	brne	.+12     	; 0xb4 <main+0x32>
					{	ones = 0;
						tens = 5;
  a8:	45 e0       	ldi	r20, 0x05	; 5
  aa:	50 e0       	ldi	r21, 0x00	; 0
						hundreds = 9;
  ac:	69 e0       	ldi	r22, 0x09	; 9
  ae:	70 e0       	ldi	r23, 0x00	; 0
						x=1;
  b0:	a1 e0       	ldi	r26, 0x01	; 1
  b2:	b0 e0       	ldi	r27, 0x00	; 0
					}
					PORTC = segment[ones];
  b4:	fc 01       	movw	r30, r24
  b6:	e0 5a       	subi	r30, 0xA0	; 160
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	20 81       	ld	r18, Z
  bc:	25 bb       	out	0x15, r18	; 21
					PORTD = segment[tens];
  be:	fa 01       	movw	r30, r20
  c0:	e0 5a       	subi	r30, 0xA0	; 160
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
  c4:	20 81       	ld	r18, Z
  c6:	22 bb       	out	0x12, r18	; 18
					PORTB = segment[hundreds];
  c8:	fb 01       	movw	r30, r22
  ca:	e0 5a       	subi	r30, 0xA0	; 160
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	20 81       	ld	r18, Z
  d0:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	32 e5       	ldi	r19, 0x52	; 82
  d6:	e7 e0       	ldi	r30, 0x07	; 7
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	30 40       	sbci	r19, 0x00	; 0
  dc:	e0 40       	sbci	r30, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x56>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x60>
  e2:	00 00       	nop
	{
		for (int hundreds = 0; hundreds <= 9; hundreds = hundreds + 1)
		{
			for (int tens = 0; tens <= 9; tens = tens + 1)
			{
				for (int ones = 0; ones <= 9; ones = ones + 1)
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	02 c0       	rjmp	.+4      	; 0xec <main+0x6a>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	8a 30       	cpi	r24, 0x0A	; 10
  ee:	91 05       	cpc	r25, r1
  f0:	8c f2       	brlt	.-94     	; 0x94 <main+0x12>
	int x = 0;
	while (1)
	{
		for (int hundreds = 0; hundreds <= 9; hundreds = hundreds + 1)
		{
			for (int tens = 0; tens <= 9; tens = tens + 1)
  f2:	4f 5f       	subi	r20, 0xFF	; 255
  f4:	5f 4f       	sbci	r21, 0xFF	; 255
  f6:	02 c0       	rjmp	.+4      	; 0xfc <main+0x7a>
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	4a 30       	cpi	r20, 0x0A	; 10
  fe:	51 05       	cpc	r21, r1
 100:	9c f3       	brlt	.-26     	; 0xe8 <main+0x66>
	DDRD = 0b01111111;// PD6 to PD0 as OUTPUT
	DDRB = 0b01111111;// PB6 to PB0 as OUTPUT
	int x = 0;
	while (1)
	{
		for (int hundreds = 0; hundreds <= 9; hundreds = hundreds + 1)
 102:	6f 5f       	subi	r22, 0xFF	; 255
 104:	7f 4f       	sbci	r23, 0xFF	; 255
 106:	6a 30       	cpi	r22, 0x0A	; 10
 108:	71 05       	cpc	r23, r1
 10a:	b4 f3       	brlt	.-20     	; 0xf8 <main+0x76>
 10c:	c0 cf       	rjmp	.-128    	; 0x8e <main+0xc>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
