
LCD 4-bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000029c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000029c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2b  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  0000101f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a8  00000000  00000000  00001681  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000358  00000000  00000000  00001b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000055b  00000000  00000000  00001ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000244f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
  7a:	0c 94 4c 01 	jmp	0x298	; 0x298 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:

void lcd_command(uint8_t cmd)
{
	// this is the first half (upper nibble) of the actual data
	//1. Set RS Pin to 0 for config mode
	LCD_PORT = 0b00000000;
  82:	12 ba       	out	0x12, r1	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | (cmd & 0b11110000);
  84:	92 b3       	in	r25, 0x12	; 18
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	92 60       	ori	r25, 0x02	; 2
  92:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef e1       	ldi	r30, 0x1F	; 31
  96:	fe e4       	ldi	r31, 0x4E	; 78
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_command+0x16>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_command+0x1c>
  9e:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	9d 7f       	andi	r25, 0xFD	; 253
  a4:	92 bb       	out	0x12, r25	; 18
  a6:	ef e1       	ldi	r30, 0x1F	; 31
  a8:	fe e4       	ldi	r31, 0x4E	; 78
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_command+0x2e>
  b0:	00 00       	nop
	_delay_ms(10);
	// this is the second half (lower nibble) of the actual data
	//1. Set RS Pin to 0 for config mode
	LCD_PORT = 0b00000000;
  b2:	12 ba       	out	0x12, r1	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | ((cmd<<4) & 0b11110000);
  b4:	22 b3       	in	r18, 0x12	; 18
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	82 2b       	or	r24, r18
  c0:	82 bb       	out	0x12, r24	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	8f e1       	ldi	r24, 0x1F	; 31
  ca:	9e e4       	ldi	r25, 0x4E	; 78
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_command+0x4a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_command+0x50>
  d2:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	82 bb       	out	0x12, r24	; 18
  da:	ef e1       	ldi	r30, 0x1F	; 31
  dc:	fe e4       	ldi	r31, 0x4E	; 78
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_command+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_command+0x62>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <lcd_character>:

void lcd_character(char ch)
{
	// this is the first half (upper nibble) of the actual data
	//1. Set RS Pin to 1 for data mode
	LCD_PORT = 0b00000001;
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	22 bb       	out	0x12, r18	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | (ch & 0b11110000);
  ec:	92 b3       	in	r25, 0x12	; 18
  ee:	38 2f       	mov	r19, r24
  f0:	30 7f       	andi	r19, 0xF0	; 240
  f2:	93 2b       	or	r25, r19
  f4:	92 bb       	out	0x12, r25	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
  f6:	92 b3       	in	r25, 0x12	; 18
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	92 bb       	out	0x12, r25	; 18
  fc:	ef e1       	ldi	r30, 0x1F	; 31
  fe:	fe e4       	ldi	r31, 0x4E	; 78
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_character+0x18>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_character+0x1e>
 106:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
 108:	92 b3       	in	r25, 0x12	; 18
 10a:	9d 7f       	andi	r25, 0xFD	; 253
 10c:	92 bb       	out	0x12, r25	; 18
 10e:	ef e1       	ldi	r30, 0x1F	; 31
 110:	fe e4       	ldi	r31, 0x4E	; 78
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_character+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_character+0x30>
 118:	00 00       	nop
	_delay_ms(10);
	// this is the second half (lower nibble) of the actual data
	//1. Set RS Pin to 1 for data mode
	LCD_PORT = 0b00000001;
 11a:	22 bb       	out	0x12, r18	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | ((ch<<4) & 0b11110000);
 11c:	22 b3       	in	r18, 0x12	; 18
 11e:	f0 e1       	ldi	r31, 0x10	; 16
 120:	8f 9f       	mul	r24, r31
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
 126:	82 2b       	or	r24, r18
 128:	82 bb       	out	0x12, r24	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	82 bb       	out	0x12, r24	; 18
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_character+0x4c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_character+0x52>
 13a:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	82 bb       	out	0x12, r24	; 18
 142:	ef e1       	ldi	r30, 0x1F	; 31
 144:	fe e4       	ldi	r31, 0x4E	; 78
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_character+0x5e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_character+0x64>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <lcd_inititalize>:
	_delay_ms(10);
}
void lcd_inititalize()
{
	LCD_DDR = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	81 bb       	out	0x11, r24	; 17
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	82 e5       	ldi	r24, 0x52	; 82
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <lcd_inititalize+0xa>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_inititalize+0x14>
 164:	00 00       	nop
	//2. to setup LCD (8-bit) 16 char 2 row mode, command = 0x38
	//2. to setup LCD (8-bit) 16 char 1 row mode, command = 0x30
	//2. to setup LCD (4-bit) 16 char 2 row mode, command = 0x28
	//2. to setup LCD (4-bit) 16 char 1 row mode, command = 0x20
	//lcd_command(0x38);
	lcd_command(0x33);lcd_command(0x32);
 166:	83 e3       	ldi	r24, 0x33	; 51
 168:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x28);
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	//3. to setup the lcd cursors as BLINK, command = 0x0F
	//3. to setup the lcd cursors as SOLID, command = 0x0E
	//3. to setup the lcd cursors disabled, command = 0x0C
	lcd_command(0x0C);
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	//4. to clear the lcd display, command = 0x01
	lcd_command(0x01);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	9e e4       	ldi	r25, 0x4E	; 78
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_inititalize+0x38>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_inititalize+0x3e>
 18e:	00 00       	nop
	_delay_ms(10);
	//5. to setup lcd print in Left-Right Direction, command = 0x06
	//5. to setup lcd print in Right-Left Direction, command = 0x04
	lcd_command(0x06);
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 196:	08 95       	ret

00000198 <print>:
}

void print(char *xyz)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	ec 01       	movw	r28, r24
	while (*xyz != '\0')
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <print+0xe>
	{
		lcd_character(*xyz);
 1a0:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_character>
		xyz++;
 1a4:	21 96       	adiw	r28, 0x01	; 1
	lcd_command(0x06);
}

void print(char *xyz)
{
	while (*xyz != '\0')
 1a6:	88 81       	ld	r24, Y
 1a8:	81 11       	cpse	r24, r1
 1aa:	fa cf       	rjmp	.-12     	; 0x1a0 <print+0x8>
	{
		lcd_character(*xyz);
		xyz++;
	}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <main>:
#include <util/delay.h>
#include "lcd4bit.h"

int main(void)
{
    DDRD = 0b11110011; // LCD Data and Command Pins
 1b2:	83 ef       	ldi	r24, 0xF3	; 243
 1b4:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b11000011; // motor pins
 1b6:	83 ec       	ldi	r24, 0xC3	; 195
 1b8:	87 bb       	out	0x17, r24	; 23
	lcd_inititalize();
 1ba:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_inititalize>
	
	while (1) 
    {
		lcd_command(0x80);
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving forward");
 1c4:	80 e6       	ldi	r24, 0x60	; 96
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 cc 00 	call	0x198	; 0x198 <print>
		PORTB = 0b01000001; // both motor clockwise
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	88 bb       	out	0x18, r24	; 24
 1d0:	2f ef       	ldi	r18, 0xFF	; 255
 1d2:	8d e3       	ldi	r24, 0x3D	; 61
 1d4:	99 e4       	ldi	r25, 0x49	; 73
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	80 40       	sbci	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <main+0x24>
 1de:	00 c0       	rjmp	.+0      	; 0x1e0 <main+0x2e>
 1e0:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 1e8:	8f ec       	ldi	r24, 0xCF	; 207
 1ea:	97 e0       	ldi	r25, 0x07	; 7
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x3a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x40>
 1f2:	00 00       	nop
		lcd_command(0x80);
 1f4:	80 e8       	ldi	r24, 0x80	; 128
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving backward");
 1fa:	8f e6       	ldi	r24, 0x6F	; 111
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 cc 00 	call	0x198	; 0x198 <print>
		PORTB = 0b10000010; // both motor anti-clockwise
 202:	82 e8       	ldi	r24, 0x82	; 130
 204:	88 bb       	out	0x18, r24	; 24
 206:	9f ef       	ldi	r25, 0xFF	; 255
 208:	2d e3       	ldi	r18, 0x3D	; 61
 20a:	89 e4       	ldi	r24, 0x49	; 73
 20c:	91 50       	subi	r25, 0x01	; 1
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 214:	00 c0       	rjmp	.+0      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 216:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 21e:	8f ec       	ldi	r24, 0xCF	; 207
 220:	97 e0       	ldi	r25, 0x07	; 7
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 226:	00 c0       	rjmp	.+0      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 228:	00 00       	nop
		lcd_command(0x80);
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving Left");
 230:	8f e7       	ldi	r24, 0x7F	; 127
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 cc 00 	call	0x198	; 0x198 <print>
		PORTB = 0b10000001; // 
 238:	81 e8       	ldi	r24, 0x81	; 129
 23a:	88 bb       	out	0x18, r24	; 24
 23c:	9f ef       	ldi	r25, 0xFF	; 255
 23e:	2d e3       	ldi	r18, 0x3D	; 61
 240:	89 e4       	ldi	r24, 0x49	; 73
 242:	91 50       	subi	r25, 0x01	; 1
 244:	20 40       	sbci	r18, 0x00	; 0
 246:	80 40       	sbci	r24, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 24c:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 254:	8f ec       	ldi	r24, 0xCF	; 207
 256:	97 e0       	ldi	r25, 0x07	; 7
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 25e:	00 00       	nop
		lcd_command(0x80);
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving right");
 266:	8b e8       	ldi	r24, 0x8B	; 139
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 cc 00 	call	0x198	; 0x198 <print>
		PORTB = 0b01000010; // 
 26e:	82 e4       	ldi	r24, 0x42	; 66
 270:	88 bb       	out	0x18, r24	; 24
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	2d e3       	ldi	r18, 0x3D	; 61
 276:	89 e4       	ldi	r24, 0x49	; 73
 278:	91 50       	subi	r25, 0x01	; 1
 27a:	20 40       	sbci	r18, 0x00	; 0
 27c:	80 40       	sbci	r24, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 280:	00 c0       	rjmp	.+0      	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
 282:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 28a:	8f ec       	ldi	r24, 0xCF	; 207
 28c:	97 e0       	ldi	r25, 0x07	; 7
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
 292:	00 c0       	rjmp	.+0      	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
 294:	00 00       	nop
 296:	93 cf       	rjmp	.-218    	; 0x1be <main+0xc>

00000298 <_exit>:
 298:	f8 94       	cli

0000029a <__stop_program>:
 29a:	ff cf       	rjmp	.-2      	; 0x29a <__stop_program>
