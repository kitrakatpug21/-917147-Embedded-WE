
ADC-Differential.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000128  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000639  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  000007bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025a  00000000  00000000  00000d69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000336  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
	DDRA = 0b00000000;// INPUT bcoz, PORTA is used as ADC (input)
  6c:	1a ba       	out	0x1a, r1	; 26
	
	DDRC = 0b11111111; // PORTC + PORTD we fir 10x LEDs to generate 
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000011; // the binary result of ADC conversion
  72:	83 e0       	ldi	r24, 0x03	; 3
  74:	81 bb       	out	0x11, r24	; 17
	
	// CONFIGURATION FOR THE ADC
	//ADMUX = 0b01000000;// AVCC w/ AREF at external Voltage, LAR=0 (LSB->MSB)
					   // Sensor MUX Line is at ADC0
	ADMUX = 0b01010000;// AVCC w/ AREF at external Voltage, LAR=0 (LSB->MSB)
  76:	80 e5       	ldi	r24, 0x50	; 80
  78:	87 b9       	out	0x07, r24	; 7
						// Sensor MUX Line is at Pos-Diff ADC0 Neg-Diff ADC1
	
	ADCSRA = 0b10000110; // ADEN is 1, START is at 0 for now, ADATE, ADIE is OFF
  7a:	86 e8       	ldi	r24, 0x86	; 134
  7c:	86 b9       	out	0x06, r24	; 6
						 // ADIF Flag is not set, Prescale is by 64	
	while (1)
	{
		ADCSRA = ADCSRA | 0b01000000; // Set the Start bit to 1 0b11000110
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	80 64       	ori	r24, 0x40	; 64
  82:	86 b9       	out	0x06, r24	; 6
		// now we will wait for the flag to be Set to 1			   ? (ADC START)
		while ((ADCSRA & 0b00010000) == 0)
  84:	34 9b       	sbis	0x06, 4	; 6
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
		{//					  ? (ADIF Flag)
			// wait here till conversion is complete
		}
		PORTC = ADCL;
  88:	84 b1       	in	r24, 0x04	; 4
  8a:	85 bb       	out	0x15, r24	; 21
		PORTD = ADCH;
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	8f e1       	ldi	r24, 0x1F	; 31
  92:	9e e4       	ldi	r25, 0x4E	; 78
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x28>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
  9c:	f0 cf       	rjmp	.-32     	; 0x7e <main+0x12>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
