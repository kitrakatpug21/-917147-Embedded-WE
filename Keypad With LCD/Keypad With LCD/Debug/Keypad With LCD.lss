
Keypad With LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00000328  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf9  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00001059  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f3  00000000  00000000  000016ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  00001c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000462  00000000  00000000  00001f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e2       	ldi	r30, 0x28	; 40
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 db 00 	call	0x1b6	; 0x1b6 <main>
  7a:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:

void lcd_command(uint8_t cmd)
{
	// this is the first half (upper nibble) of the actual data
	//1. Set RS Pin to 0 for config mode
	LCD_PORT = 0b00000000;
  82:	12 ba       	out	0x12, r1	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | (cmd & 0b11110000);
  84:	92 b3       	in	r25, 0x12	; 18
  86:	28 2f       	mov	r18, r24
  88:	20 7f       	andi	r18, 0xF0	; 240
  8a:	92 2b       	or	r25, r18
  8c:	92 bb       	out	0x12, r25	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	92 60       	ori	r25, 0x02	; 2
  92:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	ef e1       	ldi	r30, 0x1F	; 31
  96:	fe e4       	ldi	r31, 0x4E	; 78
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_command+0x16>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_command+0x1c>
  9e:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	9d 7f       	andi	r25, 0xFD	; 253
  a4:	92 bb       	out	0x12, r25	; 18
  a6:	ef e1       	ldi	r30, 0x1F	; 31
  a8:	fe e4       	ldi	r31, 0x4E	; 78
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_command+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_command+0x2e>
  b0:	00 00       	nop
	_delay_ms(10);
	// this is the second half (lower nibble) of the actual data
	//1. Set RS Pin to 0 for config mode
	LCD_PORT = 0b00000000;
  b2:	12 ba       	out	0x12, r1	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | ((cmd<<4) & 0b11110000);
  b4:	22 b3       	in	r18, 0x12	; 18
  b6:	f0 e1       	ldi	r31, 0x10	; 16
  b8:	8f 9f       	mul	r24, r31
  ba:	c0 01       	movw	r24, r0
  bc:	11 24       	eor	r1, r1
  be:	82 2b       	or	r24, r18
  c0:	82 bb       	out	0x12, r24	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
  c2:	82 b3       	in	r24, 0x12	; 18
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	82 bb       	out	0x12, r24	; 18
  c8:	8f e1       	ldi	r24, 0x1F	; 31
  ca:	9e e4       	ldi	r25, 0x4E	; 78
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_command+0x4a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_command+0x50>
  d2:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	82 bb       	out	0x12, r24	; 18
  da:	ef e1       	ldi	r30, 0x1F	; 31
  dc:	fe e4       	ldi	r31, 0x4E	; 78
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_command+0x5c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_command+0x62>
  e4:	00 00       	nop
  e6:	08 95       	ret

000000e8 <lcd_character>:

void lcd_character(char ch)
{
	// this is the first half (upper nibble) of the actual data
	//1. Set RS Pin to 1 for data mode
	LCD_PORT = 0b00000001;
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	22 bb       	out	0x12, r18	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | (ch & 0b11110000);
  ec:	92 b3       	in	r25, 0x12	; 18
  ee:	38 2f       	mov	r19, r24
  f0:	30 7f       	andi	r19, 0xF0	; 240
  f2:	93 2b       	or	r25, r19
  f4:	92 bb       	out	0x12, r25	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
  f6:	92 b3       	in	r25, 0x12	; 18
  f8:	92 60       	ori	r25, 0x02	; 2
  fa:	92 bb       	out	0x12, r25	; 18
  fc:	ef e1       	ldi	r30, 0x1F	; 31
  fe:	fe e4       	ldi	r31, 0x4E	; 78
 100:	31 97       	sbiw	r30, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <lcd_character+0x18>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_character+0x1e>
 106:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
 108:	92 b3       	in	r25, 0x12	; 18
 10a:	9d 7f       	andi	r25, 0xFD	; 253
 10c:	92 bb       	out	0x12, r25	; 18
 10e:	ef e1       	ldi	r30, 0x1F	; 31
 110:	fe e4       	ldi	r31, 0x4E	; 78
 112:	31 97       	sbiw	r30, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <lcd_character+0x2a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <lcd_character+0x30>
 118:	00 00       	nop
	_delay_ms(10);
	// this is the second half (lower nibble) of the actual data
	//1. Set RS Pin to 1 for data mode
	LCD_PORT = 0b00000001;
 11a:	22 bb       	out	0x12, r18	; 18
	//2. Load the Data on PORT-D
	LCD_PORT = LCD_PORT | ((ch<<4) & 0b11110000);
 11c:	22 b3       	in	r18, 0x12	; 18
 11e:	f0 e1       	ldi	r31, 0x10	; 16
 120:	8f 9f       	mul	r24, r31
 122:	c0 01       	movw	r24, r0
 124:	11 24       	eor	r1, r1
 126:	82 2b       	or	r24, r18
 128:	82 bb       	out	0x12, r24	; 18
	//3. Generate the Clock Signal 0-1-0
	LCD_PORT = LCD_PORT | 0b00000010;
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	82 bb       	out	0x12, r24	; 18
 130:	8f e1       	ldi	r24, 0x1F	; 31
 132:	9e e4       	ldi	r25, 0x4E	; 78
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_character+0x4c>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_character+0x52>
 13a:	00 00       	nop
	_delay_ms(10);
	LCD_PORT = LCD_PORT & ~(0b00000010);
 13c:	82 b3       	in	r24, 0x12	; 18
 13e:	8d 7f       	andi	r24, 0xFD	; 253
 140:	82 bb       	out	0x12, r24	; 18
 142:	ef e1       	ldi	r30, 0x1F	; 31
 144:	fe e4       	ldi	r31, 0x4E	; 78
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_character+0x5e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_character+0x64>
 14c:	00 00       	nop
 14e:	08 95       	ret

00000150 <lcd_inititalize>:
	_delay_ms(10);
}
void lcd_inititalize()
{
	LCD_DDR = 0xFF;
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	81 bb       	out	0x11, r24	; 17
 154:	2f ef       	ldi	r18, 0xFF	; 255
 156:	82 e5       	ldi	r24, 0x52	; 82
 158:	97 e0       	ldi	r25, 0x07	; 7
 15a:	21 50       	subi	r18, 0x01	; 1
 15c:	80 40       	sbci	r24, 0x00	; 0
 15e:	90 40       	sbci	r25, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <lcd_inititalize+0xa>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_inititalize+0x14>
 164:	00 00       	nop
	//2. to setup LCD (8-bit) 16 char 2 row mode, command = 0x38
	//2. to setup LCD (8-bit) 16 char 1 row mode, command = 0x30
	//2. to setup LCD (4-bit) 16 char 2 row mode, command = 0x28
	//2. to setup LCD (4-bit) 16 char 1 row mode, command = 0x20
	//lcd_command(0x38);
	lcd_command(0x33);lcd_command(0x32);
 166:	83 e3       	ldi	r24, 0x33	; 51
 168:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 16c:	82 e3       	ldi	r24, 0x32	; 50
 16e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	lcd_command(0x28);
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	//3. to setup the lcd cursors as BLINK, command = 0x0F
	//3. to setup the lcd cursors as SOLID, command = 0x0E
	//3. to setup the lcd cursors disabled, command = 0x0C
	lcd_command(0x0C);
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	//4. to clear the lcd display, command = 0x01
	lcd_command(0x01);
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	9e e4       	ldi	r25, 0x4E	; 78
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_inititalize+0x38>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <lcd_inititalize+0x3e>
 18e:	00 00       	nop
	_delay_ms(10);
	//5. to setup lcd print in Left-Right Direction, command = 0x06
	//5. to setup lcd print in Right-Left Direction, command = 0x04
	lcd_command(0x06);
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 196:	08 95       	ret

00000198 <print>:
}

void print(uint8_t position, char *xyz)
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	eb 01       	movw	r28, r22
	lcd_command(position);
 19e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	while (*xyz != '\0')
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <print+0x12>
	{
		lcd_character(*xyz);
 1a4:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_character>
		xyz++;
 1a8:	21 96       	adiw	r28, 0x01	; 1
}

void print(uint8_t position, char *xyz)
{
	lcd_command(position);
	while (*xyz != '\0')
 1aa:	88 81       	ld	r24, Y
 1ac:	81 11       	cpse	r24, r1
 1ae:	fa cf       	rjmp	.-12     	; 0x1a4 <print+0xc>
	{
		lcd_character(*xyz);
		xyz++;
	}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <main>:
#include <util/delay.h>
#include "lcd4bit.h"

int main(void)
{
    DDRA = 0b00001111; // PA0 to PA3 are Output, PA4 to PA7 are Input
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b11111111; // LCD AT PORT-D (4bitMode)
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	81 bb       	out	0x11, r24	; 17
	lcd_inititalize();
 1be:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_inititalize>
	while (1) 
    {
		// LOGIC FOR FIRST ROW OF KEYPAD
		PORTA |= 0b00000001; // Assign +5V to PA0 
 1c2:	8b b3       	in	r24, 0x1b	; 27
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~(0b00001110); // Assign 0V to PA1, PA2 and PA3 
 1c8:	8b b3       	in	r24, 0x1b	; 27
 1ca:	81 7f       	andi	r24, 0xF1	; 241
 1cc:	8b bb       	out	0x1b, r24	; 27
		//(1,2,3 can be input in this case)
		if (PINA & 0b00100000)
 1ce:	cd 9b       	sbis	0x19, 5	; 25
 1d0:	08 c0       	rjmp	.+16     	; 0x1e2 <main+0x2c>
		{
			// if +5V logic is found at PA5, button-1 is pressed
			// debouncing Logic
			while((PINA & 0b00100000))
 1d2:	cd 99       	sbic	0x19, 5	; 25
 1d4:	fe cf       	rjmp	.-4      	; 0x1d2 <main+0x1c>
			{
				// wait until button is released
			}
			print(0x80,"1");
 1d6:	60 e6       	ldi	r22, 0x60	; 96
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	80 e8       	ldi	r24, 0x80	; 128
 1dc:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 1e0:	13 c0       	rjmp	.+38     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		}
		else if (PINA & 0b01000000)
 1e2:	ce 9b       	sbis	0x19, 6	; 25
 1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <main+0x40>
		{
			// if +5V logic is found at PA6, button-2 is pressed
			// debouncing Logic
			while((PINA & 0b01000000))
 1e6:	ce 99       	sbic	0x19, 6	; 25
 1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <main+0x30>
			{
				// wait until button is released
			}
			print(0x80,"2");
 1ea:	62 e6       	ldi	r22, 0x62	; 98
 1ec:	70 e0       	ldi	r23, 0x00	; 0
 1ee:	80 e8       	ldi	r24, 0x80	; 128
 1f0:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 1f4:	09 c0       	rjmp	.+18     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		}
		else if (PINA & 0b10000000)
 1f6:	cf 9b       	sbis	0x19, 7	; 25
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		{
			// if +5V logic is found at PA7, button-3 is pressed
			// debouncing Logic
			while((PINA & 0b10000000))
 1fa:	cf 99       	sbic	0x19, 7	; 25
 1fc:	fe cf       	rjmp	.-4      	; 0x1fa <main+0x44>
			{
				// wait until button is released
			}
			print(0x80,"3");
 1fe:	64 e6       	ldi	r22, 0x64	; 100
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	80 e7       	ldi	r24, 0x70	; 112
 20c:	92 e0       	ldi	r25, 0x02	; 2
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 216:	00 c0       	rjmp	.+0      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 218:	00 00       	nop
		}
		_delay_ms(100);

		// LOGIC FOR SECOND ROW OF KEYPAD
		PORTA |= 0b00000010; // Assign +5V to PA1
 21a:	8b b3       	in	r24, 0x1b	; 27
 21c:	82 60       	ori	r24, 0x02	; 2
 21e:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~(0b00001101); // Assign 0V to PA0, PA2 and PA3
 220:	8b b3       	in	r24, 0x1b	; 27
 222:	82 7f       	andi	r24, 0xF2	; 242
 224:	8b bb       	out	0x1b, r24	; 27
		//(4,5,6 can be input in this case)
		if (PINA & 0b00100000)
 226:	cd 9b       	sbis	0x19, 5	; 25
 228:	08 c0       	rjmp	.+16     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
		{
			// if +5V logic is found at PA5, button-4 is pressed
			// debouncing Logic
			while((PINA & 0b00100000))
 22a:	cd 99       	sbic	0x19, 5	; 25
 22c:	fe cf       	rjmp	.-4      	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
			{
				// wait until button is released
			}
			print(0x80,"4");
 22e:	66 e6       	ldi	r22, 0x66	; 102
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e8       	ldi	r24, 0x80	; 128
 234:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 238:	13 c0       	rjmp	.+38     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
		}
		else if (PINA & 0b01000000)
 23a:	ce 9b       	sbis	0x19, 6	; 25
 23c:	08 c0       	rjmp	.+16     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
		{
			// if +5V logic is found at PA6, button-2 is pressed
			// debouncing Logic
			while((PINA & 0b01000000))
 23e:	ce 99       	sbic	0x19, 6	; 25
 240:	fe cf       	rjmp	.-4      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				// wait until button is released
			}
			print(0x80,"5");
 242:	68 e6       	ldi	r22, 0x68	; 104
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	80 e8       	ldi	r24, 0x80	; 128
 248:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 24c:	09 c0       	rjmp	.+18     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
		}
		else if (PINA & 0b10000000)
 24e:	cf 9b       	sbis	0x19, 7	; 25
 250:	07 c0       	rjmp	.+14     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
		{
			// if +5V logic is found at PA7, button-3 is pressed
			// debouncing Logic
			while((PINA & 0b10000000))
 252:	cf 99       	sbic	0x19, 7	; 25
 254:	fe cf       	rjmp	.-4      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
			{
				// wait until button is released
			}
			print(0x80,"6");
 256:	6a e6       	ldi	r22, 0x6A	; 106
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	80 e8       	ldi	r24, 0x80	; 128
 25c:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 260:	2f ef       	ldi	r18, 0xFF	; 255
 262:	80 e7       	ldi	r24, 0x70	; 112
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 270:	00 00       	nop
		}
		_delay_ms(100);
		
		// LOGIC FOR THIRD ROW OF KEYPAD
		PORTA |= 0b00000100; // Assign +5V to PA2
 272:	8b b3       	in	r24, 0x1b	; 27
 274:	84 60       	ori	r24, 0x04	; 4
 276:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~(0b00001011); // Assign 0V to PA0, PA1 and PA3
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	84 7f       	andi	r24, 0xF4	; 244
 27c:	8b bb       	out	0x1b, r24	; 27
		//(7,8,9 can be input in this case)
		if (PINA & 0b00100000)
 27e:	cd 9b       	sbis	0x19, 5	; 25
 280:	08 c0       	rjmp	.+16     	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
		{
			// if +5V logic is found at PA5, button-7 is pressed
			// debouncing Logic
			while((PINA & 0b00100000))
 282:	cd 99       	sbic	0x19, 5	; 25
 284:	fe cf       	rjmp	.-4      	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
			{
				// wait until button is released
			}
			print(0x80,"7");
 286:	6c e6       	ldi	r22, 0x6C	; 108
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 290:	13 c0       	rjmp	.+38     	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
		}
		else if (PINA & 0b01000000)
 292:	ce 9b       	sbis	0x19, 6	; 25
 294:	08 c0       	rjmp	.+16     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{
			// if +5V logic is found at PA6, button-2 is pressed
			// debouncing Logic
			while((PINA & 0b01000000))
 296:	ce 99       	sbic	0x19, 6	; 25
 298:	fe cf       	rjmp	.-4      	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
			{
				// wait until button is released
			}
			print(0x80,"8");
 29a:	6e e6       	ldi	r22, 0x6E	; 110
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	80 e8       	ldi	r24, 0x80	; 128
 2a0:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
		}
		else if (PINA & 0b10000000)
 2a6:	cf 9b       	sbis	0x19, 7	; 25
 2a8:	07 c0       	rjmp	.+14     	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
		{
			// if +5V logic is found at PA7, button-3 is pressed
			// debouncing Logic
			while((PINA & 0b10000000))
 2aa:	cf 99       	sbic	0x19, 7	; 25
 2ac:	fe cf       	rjmp	.-4      	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
			{
				// wait until button is released
			}
			print(0x80,"9");
 2ae:	60 e7       	ldi	r22, 0x70	; 112
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 2b8:	2f ef       	ldi	r18, 0xFF	; 255
 2ba:	80 e7       	ldi	r24, 0x70	; 112
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	21 50       	subi	r18, 0x01	; 1
 2c0:	80 40       	sbci	r24, 0x00	; 0
 2c2:	90 40       	sbci	r25, 0x00	; 0
 2c4:	e1 f7       	brne	.-8      	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
 2c8:	00 00       	nop
		}
		_delay_ms(100);
		
		// LOGIC FOR FOURTH ROW OF KEYPAD
		PORTA |= 0b00001000; // Assign +5V to PA3
 2ca:	8b b3       	in	r24, 0x1b	; 27
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	8b bb       	out	0x1b, r24	; 27
		PORTA &= ~(0b00000111); // Assign 0V to PA0, PA1 and PA2
 2d0:	8b b3       	in	r24, 0x1b	; 27
 2d2:	88 7f       	andi	r24, 0xF8	; 248
 2d4:	8b bb       	out	0x1b, r24	; 27
		//(*,0,# can be input in this case)
		if (PINA & 0b00100000)
 2d6:	cd 9b       	sbis	0x19, 5	; 25
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <__EEPROM_REGION_LENGTH__+0xea>
		{
			// if +5V logic is found at PA5, button-* is pressed
			// debouncing Logic
			while((PINA & 0b00100000))
 2da:	cd 99       	sbic	0x19, 5	; 25
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
			{
				// wait until button is released
			}
			print(0x80,"*");
 2de:	62 e7       	ldi	r22, 0x72	; 114
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 2e8:	13 c0       	rjmp	.+38     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
		}
		else if (PINA & 0b01000000)
 2ea:	ce 9b       	sbis	0x19, 6	; 25
 2ec:	08 c0       	rjmp	.+16     	; 0x2fe <__EEPROM_REGION_LENGTH__+0xfe>
		{
			// if +5V logic is found at PA6, button-2 is pressed
			// debouncing Logic
			while((PINA & 0b01000000))
 2ee:	ce 99       	sbic	0x19, 6	; 25
 2f0:	fe cf       	rjmp	.-4      	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
			{
				// wait until button is released
			}
			print(0x80,"0");
 2f2:	64 e7       	ldi	r22, 0x74	; 116
 2f4:	70 e0       	ldi	r23, 0x00	; 0
 2f6:	80 e8       	ldi	r24, 0x80	; 128
 2f8:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 2fc:	09 c0       	rjmp	.+18     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
		}
		else if (PINA & 0b10000000)
 2fe:	cf 9b       	sbis	0x19, 7	; 25
 300:	07 c0       	rjmp	.+14     	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
		{
			// if +5V logic is found at PA7, button-3 is pressed
			// debouncing Logic
			while((PINA & 0b10000000))
 302:	cf 99       	sbic	0x19, 7	; 25
 304:	fe cf       	rjmp	.-4      	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
			{
				// wait until button is released
			}
			print(0x80,"#");
 306:	66 e7       	ldi	r22, 0x76	; 118
 308:	70 e0       	ldi	r23, 0x00	; 0
 30a:	80 e8       	ldi	r24, 0x80	; 128
 30c:	0e 94 cc 00 	call	0x198	; 0x198 <print>
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	80 e7       	ldi	r24, 0x70	; 112
 314:	92 e0       	ldi	r25, 0x02	; 2
 316:	21 50       	subi	r18, 0x01	; 1
 318:	80 40       	sbci	r24, 0x00	; 0
 31a:	90 40       	sbci	r25, 0x00	; 0
 31c:	e1 f7       	brne	.-8      	; 0x316 <__EEPROM_REGION_LENGTH__+0x116>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <__EEPROM_REGION_LENGTH__+0x120>
 320:	00 00       	nop
 322:	4f cf       	rjmp	.-354    	; 0x1c2 <main+0xc>

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
