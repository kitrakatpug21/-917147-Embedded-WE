
LCD Interface with Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  0000020c  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1f  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000662  00000000  00000000  00000e83  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000435  00000000  00000000  000014e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000191c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000453  00000000  00000000  00001d02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002155  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 39       	cpi	r26, 0x98	; 152
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  7a:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_command>:
#include <util/delay.h>

void lcd_command(uint8_t cmd)
{
	//1. Set RS Pin to 0 for config mode
	PORTC = 0b00000000;
  82:	15 ba       	out	0x15, r1	; 21
	//2. Load the Data on PORT-D
	PORTD = cmd;
  84:	82 bb       	out	0x12, r24	; 18
	//3. Generate the Clock Signal 0-1-0
	PORTC = 0b00000010;
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	8f e1       	ldi	r24, 0x1F	; 31
  8c:	9e e4       	ldi	r25, 0x4E	; 78
  8e:	01 97       	sbiw	r24, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <lcd_command+0xc>
  92:	00 c0       	rjmp	.+0      	; 0x94 <lcd_command+0x12>
  94:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000000;
  96:	15 ba       	out	0x15, r1	; 21
  98:	8f e1       	ldi	r24, 0x1F	; 31
  9a:	9e e4       	ldi	r25, 0x4E	; 78
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <lcd_command+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <lcd_command+0x20>
  a2:	00 00       	nop
  a4:	08 95       	ret

000000a6 <lcd_character>:
}

void lcd_character(char ch)
{
	//1. Set RS Pin to 1 for character mode
	PORTC = 0b00000001;
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	95 bb       	out	0x15, r25	; 21
	//2. Load the character on PORT-D
	PORTD = ch;
  aa:	82 bb       	out	0x12, r24	; 18
	//3. Generate the Clock Signal 0-1-0
	PORTC = 0b00000011;
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	ef e1       	ldi	r30, 0x1F	; 31
  b2:	fe e4       	ldi	r31, 0x4E	; 78
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <lcd_character+0xe>
  b8:	00 c0       	rjmp	.+0      	; 0xba <lcd_character+0x14>
  ba:	00 00       	nop
	_delay_ms(10);
	PORTC = 0b00000001;
  bc:	95 bb       	out	0x15, r25	; 21
  be:	8f e1       	ldi	r24, 0x1F	; 31
  c0:	9e e4       	ldi	r25, 0x4E	; 78
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_character+0x1c>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_character+0x22>
  c8:	00 00       	nop
  ca:	08 95       	ret

000000cc <lcd_inititalize>:
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	82 e5       	ldi	r24, 0x52	; 82
  d0:	97 e0       	ldi	r25, 0x07	; 7
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <lcd_inititalize+0x6>
  da:	00 c0       	rjmp	.+0      	; 0xdc <lcd_inititalize+0x10>
  dc:	00 00       	nop
	_delay_ms(300);
	//2. to setup LCD (8-bit) 16 char 2 row mode, command = 0x38
	//2. to setup LCD (8-bit) 16 char 1 row mode, command = 0x30
	//2. to setup LCD (4-bit) 16 char 2 row mode, command = 0x28
	//2. to setup LCD (4-bit) 16 char 1 row mode, command = 0x20
	lcd_command(0x38);
  de:	88 e3       	ldi	r24, 0x38	; 56
  e0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	//3. to setup the lcd cursors as BLINK, command = 0x0F
	//3. to setup the lcd cursors as SOLID, command = 0x0E
	//3. to setup the lcd cursors disabled, command = 0x0C
	lcd_command(0x0C);
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
	//4. to clear the lcd display, command = 0x01
	lcd_command(0x01);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
  f0:	8f e1       	ldi	r24, 0x1F	; 31
  f2:	9e e4       	ldi	r25, 0x4E	; 78
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <lcd_inititalize+0x28>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <lcd_inititalize+0x2e>
  fa:	00 00       	nop
	_delay_ms(10);
	//5. to setup lcd print in Left-Right Direction, command = 0x06
	//5. to setup lcd print in Right-Left Direction, command = 0x04
	lcd_command(0x06);
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 102:	08 95       	ret

00000104 <print>:
}

void print(char *str)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	ec 01       	movw	r28, r24
	while (*str != '\0')
 10a:	03 c0       	rjmp	.+6      	; 0x112 <print+0xe>
	{
		lcd_character(*str);
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_character>
		str++;
 110:	21 96       	adiw	r28, 0x01	; 1
	lcd_command(0x06);
}

void print(char *str)
{
	while (*str != '\0')
 112:	88 81       	ld	r24, Y
 114:	81 11       	cpse	r24, r1
 116:	fa cf       	rjmp	.-12     	; 0x10c <print+0x8>
	{
		lcd_character(*str);
		str++;
	}
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	08 95       	ret

0000011e <main>:

int main(void)
{
    DDRC = 0b00000011; // RS and EN 
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111; // lcd Data Pins
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b11000011; // motor pins
 126:	83 ec       	ldi	r24, 0xC3	; 195
 128:	87 bb       	out	0x17, r24	; 23
	lcd_inititalize();
 12a:	0e 94 66 00 	call	0xcc	; 0xcc <lcd_inititalize>
	
	while (1) 
    {
		lcd_command(0x80);
 12e:	80 e8       	ldi	r24, 0x80	; 128
 130:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving forward");
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 82 00 	call	0x104	; 0x104 <print>
		PORTB = 0b01000001; // both motor clockwise
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	88 bb       	out	0x18, r24	; 24
 140:	2f ef       	ldi	r18, 0xFF	; 255
 142:	8d e3       	ldi	r24, 0x3D	; 61
 144:	99 e4       	ldi	r25, 0x49	; 73
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x28>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x32>
 150:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 158:	8f ec       	ldi	r24, 0xCF	; 207
 15a:	97 e0       	ldi	r25, 0x07	; 7
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x3e>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x44>
 162:	00 00       	nop
		lcd_command(0x80);
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving backward");
 16a:	8f e6       	ldi	r24, 0x6F	; 111
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 82 00 	call	0x104	; 0x104 <print>
		PORTB = 0b10000010; // both motor anti-clockwise
 172:	82 e8       	ldi	r24, 0x82	; 130
 174:	88 bb       	out	0x18, r24	; 24
 176:	9f ef       	ldi	r25, 0xFF	; 255
 178:	2d e3       	ldi	r18, 0x3D	; 61
 17a:	89 e4       	ldi	r24, 0x49	; 73
 17c:	91 50       	subi	r25, 0x01	; 1
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <main+0x5e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <main+0x68>
 186:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 18e:	8f ec       	ldi	r24, 0xCF	; 207
 190:	97 e0       	ldi	r25, 0x07	; 7
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <main+0x74>
 196:	00 c0       	rjmp	.+0      	; 0x198 <main+0x7a>
 198:	00 00       	nop
		lcd_command(0x80);
 19a:	80 e8       	ldi	r24, 0x80	; 128
 19c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving Left");
 1a0:	8f e7       	ldi	r24, 0x7F	; 127
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 82 00 	call	0x104	; 0x104 <print>
		PORTB = 0b10000001; // 
 1a8:	81 e8       	ldi	r24, 0x81	; 129
 1aa:	88 bb       	out	0x18, r24	; 24
 1ac:	9f ef       	ldi	r25, 0xFF	; 255
 1ae:	2d e3       	ldi	r18, 0x3D	; 61
 1b0:	89 e4       	ldi	r24, 0x49	; 73
 1b2:	91 50       	subi	r25, 0x01	; 1
 1b4:	20 40       	sbci	r18, 0x00	; 0
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <main+0x94>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x9e>
 1bc:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 1c4:	8f ec       	ldi	r24, 0xCF	; 207
 1c6:	97 e0       	ldi	r25, 0x07	; 7
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <main+0xaa>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <main+0xb0>
 1ce:	00 00       	nop
		lcd_command(0x80);
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
		print("Moving right");
 1d6:	8b e8       	ldi	r24, 0x8B	; 139
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 82 00 	call	0x104	; 0x104 <print>
		PORTB = 0b01000010; // 
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	88 bb       	out	0x18, r24	; 24
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	2d e3       	ldi	r18, 0x3D	; 61
 1e6:	89 e4       	ldi	r24, 0x49	; 73
 1e8:	91 50       	subi	r25, 0x01	; 1
 1ea:	20 40       	sbci	r18, 0x00	; 0
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xca>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0xd4>
 1f2:	00 00       	nop
		_delay_ms(3000);
		lcd_command(0x01);_delay_ms(1);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_command>
 1fa:	8f ec       	ldi	r24, 0xCF	; 207
 1fc:	97 e0       	ldi	r25, 0x07	; 7
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0xe0>
 202:	00 c0       	rjmp	.+0      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 204:	00 00       	nop
 206:	93 cf       	rjmp	.-218    	; 0x12e <main+0x10>

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
