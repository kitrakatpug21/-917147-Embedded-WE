
ADC-Multiple Sensor Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000013c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b6  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000622  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000039  00000000  00000000  000014eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 59 00 	jmp	0xb2	; 0xb2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#define F_CPU 8000000UL
#include <util/delay.h>

void ADC_Init(uint8_t channel)
{
	DDRA = 0b00000000;
  6c:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0b01000000 | channel;
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	86 b9       	out	0x06, r24	; 6
  76:	08 95       	ret

00000078 <ADC_GetResult>:
}

uint16_t ADC_GetResult()
{
	ADCSRA = ADCSRA | 0b01000000; // Set the Start bit to 1
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	86 b9       	out	0x06, r24	; 6
	// now we will wait for the flag to be Set to 1
	while ((ADCSRA & 0b00010000) == 0)
  7e:	34 9b       	sbis	0x06, 4	; 6
  80:	fe cf       	rjmp	.-4      	; 0x7e <ADC_GetResult+0x6>
	{/* wait here till conversion is complete */}
	return ADC;
  82:	84 b1       	in	r24, 0x04	; 4
  84:	95 b1       	in	r25, 0x05	; 5
}
  86:	08 95       	ret

00000088 <main>:

int main(void)
{
	DDRC = 0b11111111;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00000011;
  8c:	83 e0       	ldi	r24, 0x03	; 3
  8e:	81 bb       	out	0x11, r24	; 17
	uint16_t result = 0;
	while (1)
	{
		ADC_Init(1);
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>
		result = ADC_GetResult();
  96:	0e 94 3c 00 	call	0x78	; 0x78 <ADC_GetResult>
		PORTC = result;
  9a:	85 bb       	out	0x15, r24	; 21
		PORTD = (result>>8);
  9c:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	80 e7       	ldi	r24, 0x70	; 112
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x1c>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x26>
  ae:	00 00       	nop
  b0:	ef cf       	rjmp	.-34     	; 0x90 <main+0x8>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
