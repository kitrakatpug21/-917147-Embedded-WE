
7SegmentMatrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000016c  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005fe  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036a  00000000  00000000  00000ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000210  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000018eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
	0b01101111, //Display 9 at Index 9
};

int main(void)
{
	DDRC = 0b01111111;// PC6 to PC0 as OUTPUT
  82:	8f e7       	ldi	r24, 0x7F	; 127
  84:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b00001111; // COM Pin for Seg 1 and 2 and 3 and 4
  86:	8f e0       	ldi	r24, 0x0F	; 15
  88:	81 bb       	out	0x11, r24	; 17
	while (1)
	{
		for (int thou = 0; thou <= 2; thou = thou + 1)
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	70 e0       	ldi	r23, 0x00	; 0
  8e:	68 c0       	rjmp	.+208    	; 0x160 <main+0xde>
			{
				for (int tens = 0; tens <= 5; tens = tens + 1)
				{
					for (int ones = 0; ones <= 9; ones = ones + 1)
					{
						if (thou == 2 && hund == 3 && tens == 5 && ones == 9)
  90:	62 30       	cpi	r22, 0x02	; 2
  92:	71 05       	cpc	r23, r1
  94:	89 f4       	brne	.+34     	; 0xb8 <main+0x36>
  96:	a3 30       	cpi	r26, 0x03	; 3
  98:	b1 05       	cpc	r27, r1
  9a:	71 f4       	brne	.+28     	; 0xb8 <main+0x36>
  9c:	c5 30       	cpi	r28, 0x05	; 5
  9e:	d1 05       	cpc	r29, r1
  a0:	59 f4       	brne	.+22     	; 0xb8 <main+0x36>
  a2:	49 30       	cpi	r20, 0x09	; 9
  a4:	51 05       	cpc	r21, r1
  a6:	41 f4       	brne	.+16     	; 0xb8 <main+0x36>
						{
							thou = 0;
							hund = 0;
							tens = 0;
							ones = 0;
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
					{
						if (thou == 2 && hund == 3 && tens == 5 && ones == 9)
						{
							thou = 0;
							hund = 0;
							tens = 0;
  ac:	c0 e0       	ldi	r28, 0x00	; 0
  ae:	d0 e0       	ldi	r29, 0x00	; 0
					for (int ones = 0; ones <= 9; ones = ones + 1)
					{
						if (thou == 2 && hund == 3 && tens == 5 && ones == 9)
						{
							thou = 0;
							hund = 0;
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b0 e0       	ldi	r27, 0x00	; 0
				{
					for (int ones = 0; ones <= 9; ones = ones + 1)
					{
						if (thou == 2 && hund == 3 && tens == 5 && ones == 9)
						{
							thou = 0;
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	70 e0       	ldi	r23, 0x00	; 0
							hund = 0;
							tens = 0;
							ones = 0;
						}
						for (int rp = 0; rp < 10; rp = rp+ 1)// for a real time clock, (rp < 600)
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	35 c0       	rjmp	.+106    	; 0x128 <main+0xa6>
						{
							PORTD = 0b00001110;
  be:	2e e0       	ldi	r18, 0x0E	; 14
  c0:	22 bb       	out	0x12, r18	; 18
							PORTC = segment[thou];
  c2:	fb 01       	movw	r30, r22
  c4:	e0 5a       	subi	r30, 0xA0	; 160
  c6:	ff 4f       	sbci	r31, 0xFF	; 255
  c8:	20 81       	ld	r18, Z
  ca:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	ef e2       	ldi	r30, 0x2F	; 47
  ce:	f5 e7       	ldi	r31, 0x75	; 117
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x4e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x54>
  d6:	00 00       	nop
							_delay_ms(15);
							PORTD = 0b00001101;
  d8:	2d e0       	ldi	r18, 0x0D	; 13
  da:	22 bb       	out	0x12, r18	; 18
							PORTC = segment[hund];
  dc:	fd 01       	movw	r30, r26
  de:	e0 5a       	subi	r30, 0xA0	; 160
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	20 81       	ld	r18, Z
  e4:	25 bb       	out	0x15, r18	; 21
  e6:	ef e2       	ldi	r30, 0x2F	; 47
  e8:	f5 e7       	ldi	r31, 0x75	; 117
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <main+0x68>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x6e>
  f0:	00 00       	nop
							_delay_ms(15);
							PORTD = 0b000001011;
  f2:	2b e0       	ldi	r18, 0x0B	; 11
  f4:	22 bb       	out	0x12, r18	; 18
							PORTC = segment[tens];
  f6:	fe 01       	movw	r30, r28
  f8:	e0 5a       	subi	r30, 0xA0	; 160
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	20 81       	ld	r18, Z
  fe:	25 bb       	out	0x15, r18	; 21
 100:	ef e2       	ldi	r30, 0x2F	; 47
 102:	f5 e7       	ldi	r31, 0x75	; 117
 104:	31 97       	sbiw	r30, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x82>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x88>
 10a:	00 00       	nop
							_delay_ms(15);
							PORTD = 0b000000111;
 10c:	27 e0       	ldi	r18, 0x07	; 7
 10e:	22 bb       	out	0x12, r18	; 18
							PORTC = segment[ones];
 110:	fa 01       	movw	r30, r20
 112:	e0 5a       	subi	r30, 0xA0	; 160
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	20 81       	ld	r18, Z
 118:	25 bb       	out	0x15, r18	; 21
 11a:	ef e2       	ldi	r30, 0x2F	; 47
 11c:	f5 e7       	ldi	r31, 0x75	; 117
 11e:	31 97       	sbiw	r30, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x9c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0xa2>
 124:	00 00       	nop
							thou = 0;
							hund = 0;
							tens = 0;
							ones = 0;
						}
						for (int rp = 0; rp < 10; rp = rp+ 1)// for a real time clock, (rp < 600)
 126:	01 96       	adiw	r24, 0x01	; 1
 128:	8a 30       	cpi	r24, 0x0A	; 10
 12a:	91 05       	cpc	r25, r1
 12c:	44 f2       	brlt	.-112    	; 0xbe <main+0x3c>
		{
			for (int hund = 0; hund <= 9; hund = hund + 1)
			{
				for (int tens = 0; tens <= 5; tens = tens + 1)
				{
					for (int ones = 0; ones <= 9; ones = ones + 1)
 12e:	4f 5f       	subi	r20, 0xFF	; 255
 130:	5f 4f       	sbci	r21, 0xFF	; 255
 132:	02 c0       	rjmp	.+4      	; 0x138 <main+0xb6>
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	4a 30       	cpi	r20, 0x0A	; 10
 13a:	51 05       	cpc	r21, r1
 13c:	0c f4       	brge	.+2      	; 0x140 <main+0xbe>
 13e:	a8 cf       	rjmp	.-176    	; 0x90 <main+0xe>
	{
		for (int thou = 0; thou <= 2; thou = thou + 1)
		{
			for (int hund = 0; hund <= 9; hund = hund + 1)
			{
				for (int tens = 0; tens <= 5; tens = tens + 1)
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	02 c0       	rjmp	.+4      	; 0x148 <main+0xc6>
 144:	c0 e0       	ldi	r28, 0x00	; 0
 146:	d0 e0       	ldi	r29, 0x00	; 0
 148:	c6 30       	cpi	r28, 0x06	; 6
 14a:	d1 05       	cpc	r29, r1
 14c:	9c f3       	brlt	.-26     	; 0x134 <main+0xb2>
	DDRD = 0b00001111; // COM Pin for Seg 1 and 2 and 3 and 4
	while (1)
	{
		for (int thou = 0; thou <= 2; thou = thou + 1)
		{
			for (int hund = 0; hund <= 9; hund = hund + 1)
 14e:	11 96       	adiw	r26, 0x01	; 1
 150:	02 c0       	rjmp	.+4      	; 0x156 <main+0xd4>
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	aa 30       	cpi	r26, 0x0A	; 10
 158:	b1 05       	cpc	r27, r1
 15a:	a4 f3       	brlt	.-24     	; 0x144 <main+0xc2>
{
	DDRC = 0b01111111;// PC6 to PC0 as OUTPUT
	DDRD = 0b00001111; // COM Pin for Seg 1 and 2 and 3 and 4
	while (1)
	{
		for (int thou = 0; thou <= 2; thou = thou + 1)
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	63 30       	cpi	r22, 0x03	; 3
 162:	71 05       	cpc	r23, r1
 164:	b4 f3       	brlt	.-20     	; 0x152 <main+0xd0>
 166:	91 cf       	rjmp	.-222    	; 0x8a <main+0x8>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
